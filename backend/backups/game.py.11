import requests
import uuid
import json
import random
from textblob import TextBlob

NPC_PERSONALITIES = ["Aggressive", "Skeptical", "Emotional", "Manipulative", "Stubborn"]
CONFLICT_SCENARIOS = {
    1: "A person cuts in line at a coffee shop. How do you handle it?",
    2: "Your colleague takes credit for your work during a meeting. How do you respond?",
    3: "A community meeting turns into a heated argument over funding allocation. How do you intervene?",
    4: "You are a diplomat negotiating a ceasefire between two warring nations. How do you facilitate peace?",
}


def analyze_sentiment(text):
    """Analyze sentiment of a given text."""
    analysis = TextBlob(text)
    return (
        analysis.sentiment.polarity
    )  # Returns a score between -1 (negative) and 1 (positive)


def adjust_trust_level(trust_level, sentiment_score, npc_personality):
    """Adjust the NPC's trust level based on sentiment analysis and NPC personality."""
    adjustment = 0

    if sentiment_score > 0.2:
        adjustment = 7 if npc_personality == "Emotional" else 5
    elif sentiment_score < -0.2:
        adjustment = -7 if npc_personality == "Aggressive" else -5

    trust_level += adjustment
    return max(0, min(100, trust_level))  # Keep trust level between 0 and 100


def start_game():
    session_id = str(uuid.uuid4())
    level = 1  # Start from level 1

    print("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("        🌍 WELCOME TO PEACECRAFT 🌍")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("In this game, you are a skilled negotiator and conflict resolver.")
    print("Your mission: De-escalate and peacefully resolve conflicts that arise.")
    print("Each conflict presents unique challenges, and your ability to stay calm, ")
    print(
        "understand different perspectives, and communicate effectively will be tested."
    )
    print("\n🔹 You will face ONE-ON-ONE conflicts against an NPC opponent.")
    print(
        "🔹 The NPC may be aggressive, skeptical, manipulative, emotional, or stubborn."
    )
    print(
        "🔹 Your goal: De-escalate the situation, build trust, and find a peaceful solution."
    )
    print("\n💡 HINT: Pay attention to how your words impact the NPC’s trust level.")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

    while level <= 4:
        npc_personality = random.choice(
            NPC_PERSONALITIES
        )  # Assign personality dynamically
        print(f"\n🏆 Starting Level {level}...")
        print(f"🧠 NPC Personality: {npc_personality}")
        print(f"📖 Scenario: {CONFLICT_SCENARIOS[level]}")

        game_status = play_game(session_id, npc_personality)

        if game_status == "win":
            level += 1  # Move to the next level
            print(f"\n✅ Level {level - 1} complete! Moving to Level {level}...")
        else:
            print("\n❌ Game over. Restarting from Level 1...")
            level = 1


def play_game(session_id, npc_personality):
    total_sentiment = 0  # Track sentiment over the conversation
    message_count = 0
    trust_level = 50  # Initialize trust level

    while True:
        player_input = input("\n🗨️ Your response: ")
        if player_input.lower() in ["exit", "conflict resolved", "end"]:
            print("\n🕊️ Conflict resolved. Ending game...")
            final_score = total_sentiment / message_count if message_count > 0 else 0
            print(f"\n📊 Final Sentiment Score: {final_score:.2f}")
            if final_score > 0.2 and trust_level > 65:
                print(
                    "\n✅ Congratulations! You successfully de-escalated the situation."
                )
                return "win"
            elif final_score < -0.2 or trust_level < 25:
                print("\n❌ Game over. The conflict escalated beyond control.")
                return "loss"
            else:
                print(
                    "\n🤝 The conflict was neutral, but not fully resolved. Try again!"
                )
                return "neutral"

        sentiment_score = analyze_sentiment(player_input)
        total_sentiment += sentiment_score
        message_count += 1
        trust_level = adjust_trust_level(trust_level, sentiment_score, npc_personality)

        print(
            f"[Debug] Sentiment Score for Response: {sentiment_score:.2f}"
        )  # Print sentiment score for each response
        print(
            f"[Debug] Cumulative Sentiment Score: {total_sentiment:.2f}"
        )  # Track the running sentiment score
        print(
            f"[Debug] Adjusted Trust Level: {trust_level}"
        )  # Show trust level changes

        print(f"\n🔥 NPC ({npc_personality}): [The NPC responds based on trust level]")
        print(f"💙 Trust Level: {trust_level}")

        if trust_level > 65:
            print("\n✅ Congratulations! You successfully de-escalated the situation.")
            return "win"
        elif trust_level < 25:
            print("\n❌ Game over. The conflict escalated beyond control.")
            return "loss"
        else:
            print("\n⚔️ The NPC is still confrontational. Keep negotiating...")


if __name__ == "__main__":
    start_game()
