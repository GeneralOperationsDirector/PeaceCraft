import uuid
import json
import random
import requests
from textblob import TextBlob

# Ollama API URL for generating responses
OLLAMA_API_URL = "http://localhost:11434/api/generate"

# Define NPC personalities with detailed behavioral descriptions
NPC_PERSONALITIES = {
    "Aggressive": "The NPC is confrontational, quick to anger, and dismisses logic in favor of dominance.",
    "Skeptical": "The NPC doubts everything you say and requires strong reasoning to be convinced.",
    "Emotional": "The NPC reacts more to tone and empathy rather than pure logic.",
    "Manipulative": "The NPC attempts to twist words, gaslight, or redirect the situation to their advantage.",
    "Stubborn": "The NPC resists change, refuses compromise, and dislikes negotiation.",
}


# Function to analyze sentiment of player's response
def analyze_sentiment(text):
    """Analyze sentiment of a given text. Returns a score between -1 (negative) and 1 (positive)."""
    analysis = TextBlob(text)
    return analysis.sentiment.polarity


# Adjust NPC trust level dynamically based on player's sentiment and NPC's personality
def adjust_trust_level(trust_level, sentiment_score, npc_personality):
    """Adjust NPC's trust level based on sentiment and their personality type."""
    adjustment = 0
    if sentiment_score > 0.2:
        adjustment = 7 if npc_personality == "Emotional" else 5
    elif sentiment_score < -0.2:
        adjustment = -7 if npc_personality == "Aggressive" else -5
    trust_level += adjustment
    return max(0, min(100, trust_level))  # Keep trust level between 0 and 100


# Function to generate a unique scenario for the current level
def generate_scenario(level):
    """Calls Ollama API to generate a unique conflict scenario based on game level."""
    prompt = f"Generate a unique conflict scenario for level {level} of Peacecraft. The player must resolve it peacefully using negotiation and de-escalation. Ensure the situation increases in complexity as levels progress."

    try:
        response = requests.post(
            OLLAMA_API_URL, json={"model": "mistral", "prompt": prompt}, stream=True
        )

        if response.status_code != 200:
            print(f"⚠️ API Error ({response.status_code}): {response.text}")
            return "[Error generating scenario]"

        scenario_text = ""
        for line in response.iter_lines():
            if line:
                try:
                    chunk = json.loads(line)  # Parse each streamed JSON chunk
                    scenario_text += chunk.get("response", "")
                    if chunk.get("done", False):  # Stop if last chunk
                        break
                except json.JSONDecodeError:
                    print(f"⚠️ Streaming JSON Parsing Error: {line}")

        return scenario_text.strip() if scenario_text else "[No generated scenario]"

    except requests.exceptions.RequestException as e:
        print(f"⚠️ Request Failed: {e}")
        return "[Error connecting to API]"


# Memory storage for tracking conversation history
npc_memory = {}


def get_npc_response(session_id, npc_personality, player_input, scenario):
    """Calls the Ollama API to generate an NPC response with memory of previous exchanges."""

    # Ensure this session has an initialized memory
    if session_id not in npc_memory:
        npc_memory[session_id] = []

    # Retrieve conversation history
    history = "\n".join(
        npc_memory[session_id][-5:]
    )  # Keep only the last 5 exchanges for brevity

    # Construct the prompt with memory, scenario details, and NPC personality
    personality_desc = NPC_PERSONALITIES[npc_personality]
    prompt = f"""You are an NPC in a game called Peacecraft. 
Your personality is: {npc_personality} - {personality_desc}.
The conflict scenario is: {scenario}
Conversation history:
{history}

Player: {player_input}
NPC ({npc_personality}):"""

    try:
        response = requests.post(
            OLLAMA_API_URL, json={"model": "mistral", "prompt": prompt}, stream=True
        )

        if response.status_code != 200:
            print(f"⚠️ API Error ({response.status_code}): {response.text}")
            return "[Error generating NPC response]"

        npc_text = ""
        for line in response.iter_lines():
            if line:
                try:
                    chunk = json.loads(line)
                    npc_text += chunk.get("response", "")
                    if chunk.get("done", False):
                        break
                except json.JSONDecodeError:
                    print(f"⚠️ Streaming JSON Parsing Error: {line}")

        # Store response in NPC memory
        npc_memory[session_id].append(f"Player: {player_input}")
        npc_memory[session_id].append(f"NPC ({npc_personality}): {npc_text.strip()}")

        return npc_text.strip() if npc_text else "[No response from NPC]"

    except requests.exceptions.RequestException as e:
        print(f"⚠️ Request Failed: {e}")
        return "[Error connecting to API]"


# Function to initialize and start the game
def start_game():
    """Starts the game with a dynamically generated scenario and NPC."""
    session_id = str(uuid.uuid4())  # Generate a unique session ID
    level = 1  # Start from level 1

    print("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("        🌍 WELCOME TO PEACECRAFT 🌍")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("Your mission is to de-escalate conflicts and achieve peaceful resolutions.")
    print("Each level presents a new challenge requiring negotiation and strategy.")
    print(
        "NPC opponents will have distinct personalities that affect the difficulty of resolving conflicts."
    )
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

    while level <= 4:
        npc_personality = random.choice(
            list(NPC_PERSONALITIES.keys())
        )  # Assign dynamic NPC personality
        scenario = generate_scenario(level)  # Generate scenario

        print(f"\n🏆 Starting Level {level}...")
        print(f"🧠 NPC Personality: {npc_personality}")
        print(f"📖 Scenario: {scenario}")

        # ✅ Now correctly passing all required arguments
        game_status = play_game(session_id, npc_personality, scenario)

        if game_status == "win":
            level += 1  # Move to the next level
            print(f"\n✅ Level {level - 1} complete! Moving to Level {level}...")
        else:
            print("\n❌ Game over. Restarting from Level 1...")
            level = 1


# Function that handles the game loop and player-NPC interaction
def play_game(session_id, npc_personality, scenario):
    """Core gameplay loop where the player interacts with the NPC."""
    total_sentiment = 0  # Track sentiment across interactions
    message_count = 0
    trust_level = 50  # Initial trust level

    while True:
        player_input = input("\n🗨️ Your response: ")
        if player_input.lower() in ["exit", "conflict resolved", "end"]:
            print("\n🕊️ Conflict resolved. Ending game...")
            final_score = total_sentiment / message_count if message_count > 0 else 0
            print(f"\n📊 Final Sentiment Score: {final_score:.2f}")
            if final_score > 0.2 and trust_level > 65:
                print(
                    "\n✅ Congratulations! You successfully de-escalated the situation."
                )
                return "win"
            elif final_score < -0.2 or trust_level < 25:
                print("\n❌ Game over. The conflict escalated beyond control.")
                return "loss"
            else:
                print(
                    "\n🤝 The conflict was neutral, but not fully resolved. Try again!"
                )
                return "neutral"

        sentiment_score = analyze_sentiment(player_input)
        total_sentiment += sentiment_score
        message_count += 1
        trust_level = adjust_trust_level(trust_level, sentiment_score, npc_personality)

        # ✅ Pass session_id and scenario to get_npc_response()
        npc_response = get_npc_response(
            session_id, npc_personality, player_input, scenario
        )

        print(f"\n🔥 NPC ({npc_personality}): {npc_response}")
        print(f"💙 Trust Level: {trust_level}")

        if trust_level > 65:
            print("\n✅ Congratulations! You successfully de-escalated the situation.")
            return "win"
        elif trust_level < 25:
            print("\n❌ Game over. The conflict escalated beyond control.")
            return "loss"
        else:
            print("\n⚔️ The NPC is still confrontational. Keep negotiating...")


if __name__ == "__main__":
    start_game()
