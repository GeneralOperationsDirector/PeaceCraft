import requests
import uuid
import json
from textblob import TextBlob


def analyze_sentiment(text):
    """Analyze sentiment of a given text."""
    analysis = TextBlob(text)
    return (
        analysis.sentiment.polarity
    )  # Returns a score between -1 (negative) and 1 (positive)


def start_game():
    session_id = str(uuid.uuid4())
    level = 1  # Start from level 1

    print("\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("        🌍 WELCOME TO PEACECRAFT 🌍")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")
    print("In this game, you are a skilled negotiator and conflict resolver.")
    print("Your mission: De-escalate and peacefully resolve conflicts that arise.")
    print("Each conflict presents unique challenges, and your ability to stay calm, ")
    print(
        "understand different perspectives, and communicate effectively will be tested."
    )
    print("\n🔹 You will face ONE-ON-ONE conflicts against an NPC opponent.")
    print("🔹 The NPC may be aggressive, skeptical, manipulative, or stubborn.")
    print(
        "🔹 Your goal: De-escalate the situation, build trust, and find a peaceful solution."
    )
    print("\n💡 HINT: Pay attention to how your words impact the NPC’s trust level.")
    print("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━")

    while level <= 4:
        print(f"\n🏆 Starting Level {level}...")
        response = requests.post(
            "http://localhost:8001/game/start",
            json={"session_id": session_id, "level": level},
            headers={"Content-Type": "application/json"},
        )

        if response.status_code == 200:
            game_data = response.json()
            print(f"\n📖 Scenario: {game_data['scenario']}")
            game_status = play_game(session_id)

            if game_status == "win":
                level += 1  # Move to the next level
                print(f"\n✅ Level {level - 1} complete! Moving to Level {level}...")
            else:
                print("\n❌ Game over. Restarting from Level 1...")
                level = 1
        else:
            print("Error starting game.")
            break


def play_game(session_id):
    total_sentiment = 0  # Track sentiment over the conversation
    message_count = 0

    while True:
        player_input = input("\n🗨️ Your response: ")
        if player_input.lower() in ["exit", "conflict resolved", "end"]:
            print("\n🕊️ Conflict resolved. Ending game...")
            final_score = total_sentiment / message_count if message_count > 0 else 0
            print(f"\n📊 Final Sentiment Score: {final_score:.2f}")
            if final_score > 0.2:
                print(
                    "\n✅ Congratulations! You successfully de-escalated the situation."
                )
                return "win"
            elif final_score < -0.2:
                print("\n❌ Game over. The conflict escalated beyond control.")
                return "loss"
            else:
                print(
                    "\n🤝 The conflict was neutral, but not fully resolved. Try again!"
                )
                return "neutral"

        sentiment_score = analyze_sentiment(player_input)
        total_sentiment += sentiment_score
        message_count += 1

        print(
            f"[Debug] Sentiment Score for Response: {sentiment_score:.2f}"
        )  # Print sentiment score for each response
        print(
            f"[Debug] Cumulative Sentiment Score: {total_sentiment:.2f}"
        )  # Track the running sentiment score

        response = requests.post(
            "http://localhost:8001/game/respond",
            json={
                "session_id": session_id,
                "player_response": player_input,
                "npc_tone": "aggressive",
            },
            headers={"Content-Type": "application/json"},
        )

        if response.status_code == 200:
            game_state = response.json()
            npc_response = game_state.get("npc_response", "[No response]")
            trust_level = game_state.get("trust_level", 50)
            game_status = game_state.get("game_status", "ongoing")

            print(f"\n🔥 NPC (Aggressive): {npc_response}")
            print(f"💙 Trust Level: {trust_level}")

            print(f"[Debug] Current Game Status: {game_status}")

            if game_status == "win":
                print(
                    "\n✅ Congratulations! You successfully de-escalated the situation."
                )
                return "win"
            elif game_status == "loss":
                print("\n❌ Game over. The conflict escalated beyond control.")
                return "loss"
            else:
                print("\n⚔️ The NPC is still confrontational. Keep negotiating...")
        else:
            print("Error processing response.")


if __name__ == "__main__":
    start_game()
